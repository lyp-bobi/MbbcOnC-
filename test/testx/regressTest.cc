//
// Created by Chuang on 2020/10/28.
//
#include "testFuncs.h"

int main(){
    struct str{
        char a[100];
    };
    cerr<<sizeof(str)<<endl;
    string target = "tdexpand.datas";
    xStore x(target, testFileName(target), true);
    double seglen[]={600};//900,1200,1800
    xCylinder query(xPoint(40,116.327,6516),0.0001,6516,9516,2);
    xTrajectory tj,tj2;
//    tj.getMinimumDistance(tj2);
//    x.loadTraj(tj, xStoreEntry(4337,0,1000));
//    tj.intersectsxCylinder(query);
//    cerr<<tj.intersectsxCylinder(query);
    tjstat->bt=50;
    xSBB s;
    s.loadFromString("0 1 0 39.984438 116.347402 9194.000000 39.998213 116.365543 10194.000000 0.043406 0.000149");
    query.checkRel(s);
    MyVisitor vis;
    vector<xTrajectory> queries;
    for(int i=0;i<500;i++)
    {
        queries.emplace_back(x.randomSubtraj(4300));
    }


    try {
        for(int i=0;i<1;i++) {
//            tj = x.randomSubtraj(3000);
            tj.loadFromString("116.329232,39.879030,5029569.186606 116.329230,39.879030,5029643.000000 116.329243,39.879049,5032569.186606");
            cerr<<tj.toString()<<endl;
//            tj.loadFromString(
//                    "39.980405,116.359730,7.000000 39.980375,116.359712,8.000000 39.980352,116.359652,10.000000 39.980325,116.359603,12.000000 39.980325,116.359550,14.000000 39.980335,116.359495,16.000000 39.980260,116.359447,18.000000 39.980232,116.359380,20.000000 39.980208,116.359325,22.000000 39.980168,116.359313,24.000000 39.980108,116.359328,26.000000 39.980063,116.359327,28.000000 39.979997,116.359342,30.000000 39.979912,116.359332,32.000000 39.979757,116.359297,34.000000 39.979693,116.359312,36.000000 39.979728,116.359333,38.000000 39.979815,116.359365,40.000000 39.979858,116.359388,42.000000 39.979707,116.359440,45.000000 39.979773,116.359462,47.000000 39.979723,116.359467,49.000000 39.979637,116.359467,51.000000 39.979572,116.359465,53.000000 39.979448,116.359477,55.000000 39.979390,116.359468,57.000000 39.979322,116.359487,59.000000 39.979312,116.359463,61.000000 39.979248,116.359447,63.000000 39.979188,116.359462,65.000000 39.979440,116.359612,67.000000 39.979493,116.359637,69.000000 39.979370,116.359590,72.000000 39.979180,116.359578,75.000000 39.979142,116.359570,77.000000 39.979135,116.359592,79.000000 39.978730,116.359485,81.000000 39.978613,116.359452,83.000000 39.978557,116.359417,85.000000 39.978500,116.359397,87.000000 39.978447,116.359387,89.000000 39.978402,116.359423,91.000000 39.978357,116.359475,93.000000 39.978293,116.359472,95.000000 39.978230,116.359472,97.000000 39.978165,116.359473,99.000000 39.978103,116.359442,101.000000 39.978042,116.359458,103.000000 39.977982,116.359592,105.000000 39.977920,116.359565,107.000000 39.977868,116.359535,109.000000 39.977813,116.359513,111.000000 39.977757,116.359523,113.000000 39.977705,116.359528,115.00000039.977647,116.359532,117.000000 39.977605,116.359540,119.000000 39.977528,116.359523,121.000000 39.977457,116.359512,123.000000 39.977392,116.359483,125.000000 39.977330,116.359448,127.000000 39.977277,116.359420,129.000000 39.977235,116.359423,131.000000 39.977172,116.359417,133.000000 39.977097,116.359410,135.000000 39.977035,116.359408,137.000000 39.976973,116.359418,139.000000 39.976912,116.359418,141.000000 39.976843,116.359398,143.000000 39.976780,116.359375,145.00000039.976722,116.359377,147.000000 39.976663,116.359385,149.000000 39.976605,116.359390,151.000000 39.976532,116.359402,153.000000 39.976468,116.359400,155.000000 39.976402,116.359342,157.000000 39.976343,116.359308,159.000000 39.976297,116.359303,161.000000 39.976255,116.359318,163.000000 39.976205,116.359345,165.000000 39.976147,116.359372,167.000000 39.976098,116.359367,169.000000 39.976032,116.359387,171.000000 39.975988,116.359418,173.000000 39.975945,116.359468,175.00000039.975902,116.359503,177.000000 39.975825,116.359503,179.000000 39.975757,116.359408,181.000000 39.975678,116.359373,183.000000 39.975623,116.359375,185.000000 39.975590,116.359403,187.000000 39.975565,116.359473,189.000000 39.975555,116.359480,191.000000 39.975562,116.359537,194.000000 39.975627,116.359577,197.000000 39.975733,116.359643,200.000000 39.975838,116.359745,203.000000 39.975935,116.359837,206.000000 39.976033,116.359933,209.000000 39.976110,116.359918,212.00000039.976143,116.359945,215.000000 39.976167,116.360002,218.000000 39.976195,116.360048,221.000000 39.976188,116.360075,224.000000 39.976180,116.360093,227.000000 39.976152,116.360157,230.000000 39.976152,116.360217,233.000000 39.976155,116.360265,236.000000 39.976252,116.360320,239.000000 39.977130,116.359967,246.000000 39.977190,116.359763,248.000000 39.977258,116.359615,250.000000 39.977413,116.359648,252.000000 39.977475,116.359920,255.000000 39.977542,116.360047,258.00000039.977525,116.360172,261.000000 39.977748,116.360245,264.000000"
//                    );
            double res1 = 0;
            double res2 = 0;
            for (auto querylen:seglen) {
                tjstat->bt = querylen;
                auto r = buildMBCRTreeWP(&x, xTrajectory::ISS, querylen);
//            r->intersectsWithQuery(query, vis);
                r->nearestNeighborQuery(6, tj, vis);

                std::cerr<<"Hoo " << vis.m_resultGet << " " << vis.m_lastResult << endl;
                if(res1==0&&res2==0) {
                    res1 = vis.m_resultGet;
                    res2 = vis.m_lastResult;
                }else{
                    if(vis.m_resultGet!=res1 || vis.m_lastResult!=res2){
                        cerr<<tj<<endl;
                        return 1;
                    }
                }
                vis.clear();
//            auto r2 = buildMBRRTreeWP(&x, xTrajectory::ISS,querylen);
//            r2->intersectsWithQuery(query, vis);
//            r2->nearestNeighborQuery(6, tj, vis);
//            std::cerr << vis.m_resultGet << " " << vis.m_lastResult << endl;
//            vis.clear();
            }
        {
            auto r = buildTBTreeWP(&x);
            r->intersectsWithQuery(query, vis);
            r->nearestNeighborQuery(6, tj, vis);
            std::cerr <<"Hoo " << vis.m_resultGet << " " << vis.m_lastResult << endl;
            vis.clear();
        }
//        {
//            auto r = buildSTRTreeWP(&x);
////            r->intersectsWithQuery(query, vis);
////            r->findid(3134);
//            r->nearestNeighborQuery(6, tj, vis);
//            std::cerr << vis.m_resultGet << " " << vis.m_lastResult << endl;
//            vis.clear();
//        }
//        for (auto querylen:querylens) {
//            tjstat->bt = querylen;
//            auto r = buildMBCRTreeWP(&x, xTrajectory::ISS,querylen);
//            r->intersectsWithQuery(query, vis);
//            r->nearestNeighborQuery(6, tj, vis);
//            std::cerr << vis.m_resultGet << " " << vis.m_lastResult << endl;
//            vis.clear();
//            auto r2 = buildMBRRTreeWP(&x, xTrajectory::ISS,querylen);
//            r2->intersectsWithQuery(query, vis);
//            r2->nearestNeighborQuery(6, tj, vis);
//            std::cerr << vis.m_resultGet << " " << vis.m_lastResult << endl;
//            vis.clear();
//        }
//        {
//            auto r = buildTBTreeWP(&x);
//            r->intersectsWithQuery(query, vis);
//            r->nearestNeighborQuery(6, tj, vis);
//            std::cerr << vis.m_resultGet << " " << vis.m_lastResult << endl;
//            vis.clear();
//        }
//        {
//            auto r = buildSTRTreeWP(&x);
//            r->intersectsWithQuery(query, vis);
//            r->nearestNeighborQuery(6, tj, vis);
//            std::cerr << vis.m_resultGet << " " << vis.m_lastResult << endl;
//            vis.clear();
//        }
        }
    }
    catch (Tools::Exception &e) {
        cerr << "******ERROR******" << endl;
        std::string s = e.what();
        cerr << s << endl;
        return -1;
    }
}